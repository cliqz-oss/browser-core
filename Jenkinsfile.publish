#!/bin/env groovy

node('docker') {
  stage('checkout') {
    checkout scm
  }

  def helpers = load 'build-helpers.groovy'
  def imgName = "cliqz/navigation-extension:${env.BUILD_TAG}"

  stage('docker build') {
    sh "docker build -t ${imgName} --build-arg UID=`id -u` --build-arg GID=`id -g` ."
    dockerFingerprintFrom dockerfile: './Dockerfile', image: imgName, toolName: env.DOCKER_TOOL_NAME
  }

  withCerts {
    docker.image(imgName).inside() {
      withEnv(["CLIQZ_CONFIG_PATH=./configs/${CLIQZ_CHANNEL}.js"]) {
        helpers.withCache {
          stage('fern test') {
            sh './fern.js test ./configs/ci/unit-tests.js -l unit-node --ci tests.xml'
          }
          if (params.CLIQZ_BETA == 'True') {
            stage('fern build') {
              sh './fern.js build --environment=production'
            }
          } else {
            stage('fern build') {
              sh './fern.js build --no-debug --environment=production'
            }
          }
        }
      }

      stage('checkout xpi-sign') {
        checkout([
            $class: 'GitSCM',
            branches: [[name: '*/cliqz-ci']],
            doGenerateSubmoduleConfigurations: false,
            extensions: [[
              $class: 'RelativeTargetDirectory',
              relativeTargetDir: 'xpi-sign'
            ]],
            submoduleCfg: [],
            userRemoteConfigs: [[
              credentialsId: XPI_SIGN_CREDENTIALS,
              url: XPI_SIGN_REPO_URL
            ]]
        ])
      }

      stage('Publish') {
        withCredentials([[
            $class: 'UsernamePasswordMultiBinding',
            credentialsId: '06ec4a34-9d01-46df-9ff8-64c79eda8b14',
            passwordVariable: 'AWS_SECRET_ACCESS_KEY',
            usernameVariable: 'AWS_ACCESS_KEY_ID'],
            usernamePassword(
            credentialsId: '774bccf1-ae66-41e1-9f2e-f8efb4bedc21',
            passwordVariable: 'BALROG_PASSWORD',
            usernameVariable: 'BALROG_ADMIN')
        ]) {
          withEnv(["CLIQZ_CONFIG_PATH=./configs/${CLIQZ_CHANNEL}.js"]) {
            helpers.withCache {
              sh './fern.js pack'

              def output = sh(
                  returnStdout: true,
                  script: './fern.js publish',
              ).trim()

              echo output
            }
          }
        }
      }

      // NOTE: doc generation has been broken for a while. Let's keep it
      // disabled until someone has time to fix it properly.
      // if (env.BRANCH_NAME == 'master') {
      //   stage('upload docs') {
      //     withCredentials([[
      //         $class: 'UsernamePasswordMultiBinding',
      //         credentialsId: '06ec4a34-9d01-46df-9ff8-64c79eda8b14',
      //         passwordVariable: 'AWS_SECRET_ACCESS_KEY',
      //         usernameVariable: 'AWS_ACCESS_KEY_ID']]) {

      //       def s3DocPath = 's3://internal.clyqz.com/docs/browser-core'

      //       sh "aws s3 rm $s3DocPath --recursive"
      //       sh "aws s3 cp docs $s3DocPath --recursive"
      //     }
      //   }
      // }
    }
  }
}

def withCerts(Closure body) {
  def cleanup = {
    sh 'rm -rf certs'
  }
  try {
    cleanup()
    sh 'cp -R /cliqz certs'
    body()
  } finally {
    cleanup()
  }
}
